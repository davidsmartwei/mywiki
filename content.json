{"pages":[{"title":"About","date":"2018-01-31T09:21:07.910Z","updated":"2018-01-31T09:21:07.910Z","comments":true,"path":"about/index.html","permalink":"http://www.less-is-more.top/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2018-01-31T09:21:07.914Z","updated":"2018-01-31T09:21:07.914Z","comments":true,"path":"categories/index.html","permalink":"http://www.less-is-more.top/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-01-31T09:21:07.922Z","updated":"2018-01-31T09:21:07.922Z","comments":true,"path":"tags/index.html","permalink":"http://www.less-is-more.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"docker vs 虚拟机","slug":"纵观古今/docker-vs-虚拟机","date":"2018-04-24T07:47:03.000Z","updated":"2018-04-26T03:08:05.851Z","comments":true,"path":"wiki/纵观古今/docker-vs-虚拟机/","link":"","permalink":"http://www.less-is-more.top/wiki/纵观古今/docker-vs-虚拟机/","excerpt":"转载自阮一峰的Docker入门教程 需求软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？ 用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。 如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：”它在我的机器可以跑了”（It works on my machine），言下之意就是，其他机器很可能跑不了。 环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。","text":"转载自阮一峰的Docker入门教程 需求软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？ 用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。 如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：”它在我的机器可以跑了”（It works on my machine），言下之意就是，其他机器很可能跑不了。 环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。 发展虚拟机虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。 虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。 资源占用多 虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。 冗余步骤多 虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。 启动慢 启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。 Linux容器由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。 Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。 由于容器是进程级别的，相比虚拟机有很多优势。 启动快 容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。 资源占用少 容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。 体积小 容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。 总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。 DockerDocker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案. Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。 总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。 参考资料 Docker 入门教程","categories":[{"name":"纵观古今","slug":"纵观古今","permalink":"http://www.less-is-more.top/categories/纵观古今/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://www.less-is-more.top/tags/docker/"},{"name":"虚拟机","slug":"虚拟机","permalink":"http://www.less-is-more.top/tags/虚拟机/"}]},{"title":"Docker入门","slug":"横看当前/Docker入门","date":"2018-04-24T07:44:44.000Z","updated":"2018-04-26T03:02:48.456Z","comments":true,"path":"wiki/横看当前/Docker入门/","link":"","permalink":"http://www.less-is-more.top/wiki/横看当前/Docker入门/","excerpt":"简介Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口,Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。","text":"简介Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口,Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。 功能Docker 的主要用途，目前有三大类。 （1）提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。 （2）提供弹性的云服务。因为 Docker容器可以随开随关，很适合动态扩容和缩容。 （3）组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。 实现安装Docker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。企业版包含了一些收费服务，个人开发者一般用不到。下面的介绍都针对社区版。 Windows Ubuntu Debian CentOS 验证123$ docker version# 或者$ docker info sudo权限Docker 需要用户具有 sudo 权限，为了避免每次命令都输入sudo，可以把用户加入 Docker 用户组 1$ sudo usermod -aG docker $USER 服务器-客户端架构命令行运行docker命令的时候，需要本机有 Docker 服务。如果这项服务没有启动，可以用下面的命令启动 12345# service 命令的用法$ sudo service docker start# systemctl 命令的用法$ sudo systemctl start docker 文件说明Dockerfile 文件一个文本文件,用来配置 image。Docker根据 该文件生成二进制的image文件 image文件 Docker把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例 image是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image 12345# 列出本机的所有 image 文件。$ docker image ls# 删除 image 文件$ docker image rm [imageName] image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。Docker 的官方仓库 Docker Hub 是最重要、最常用的 image 仓库。 容器文件image 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。 12345# 列出本机正在运行的容器$ docker container ls# 列出本机所有容器，包括终止运行的容器$ docker container ls --all 上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的docker container kill命令。 终止运行的容器文件，依然会占据硬盘空间，可以使用docker container rm命令删除。 实践：制作自己的 Docker 容器 准备工作 下载源码 12$ git clone https://github.com/ruanyf/koa-demos.git$ cd koa-demos 编写Dockerfile文件首先，在项目的根目录下，新建一个文本文件.dockerignore，写入下面的内容。 1234&gt; .git&gt; node_modules&gt; npm-debug.log&gt; 上面代码表示，这三个路径要排除，不要打包进入 image 文件。如果你没有路径要排除，这个文件可以不新建。 然后，在项目的根目录下，新建一个文本文件 Dockerfile，写入下面的内容。 123456&gt; FROM node:8.4&gt; COPY . /app&gt; WORKDIR /app&gt; RUN npm install --registry=https://registry.npm.taobao.org&gt; EXPOSE 3000&gt; 上面代码一共五行，含义如下。 FROM node:8.4：该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node。 COPY . /app：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录。 WORKDIR /app：指定接下来的工作路径为/app。 RUN npm install：在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。 EXPOSE 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口。 创建image文件有了 Dockerfile 文件以后，就可以使用docker image build命令创建 image 文件了。 1234&gt; $ docker image build -t koa-demo .&gt; # 或者&gt; $ docker image build -t koa-demo:0.0.1 .&gt; 上面代码中，-t参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是latest。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。 如果运行成功，就可以看到新生成的 image 文件koa-demo了。 12&gt; $ docker image ls&gt; 生成容器docker container run命令会从 image 文件生成容器。 1234&gt; $ docker container run -p 8000:3000 -it koa-demo /bin/bash&gt; # 或者&gt; $ docker container run -p 8000:3000 -it koa-demo:0.0.1 /bin/bash&gt; 上面命令的各个参数含义如下： -p参数：容器的 3000 端口映射到本机的 8000 端口。 -it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。 koa-demo:0.0.1：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。 /bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。 如果一切正常，运行上面的命令以后，就会返回一个命令行提示符。 12&gt; root@66d80f4aaf1e:/app#&gt; 这表示你已经在容器里面了，返回的提示符就是容器内部的 Shell 提示符。执行下面的命令。 12&gt; root@66d80f4aaf1e:/app# node demos/01.js&gt; 这时，Koa 框架已经运行起来了。打开本机的浏览器，访问 http://127.0.0.1:8000，网页显示&quot;Not Found”，这是因为这个 demo 没有写路由。 这个例子中，Node 进程运行在 Docker 容器的虚拟环境里面，进程接触到的文件系统和网络接口都是虚拟的，与本机的文件系统和网络接口是隔离的，因此需要定义容器与物理机的端口映射（map）。 现在，在容器的命令行，按下 Ctrl + c 停止 Node 进程，然后按下 Ctrl + d （或者输入 exit）退出容器。此外，也可以用docker container kill终止容器运行。 123456&gt; # 在本机的另一个终端窗口，查出容器的 ID&gt; $ docker container ls&gt;&gt; # 停止指定的容器运行&gt; $ docker container kill [containerID]&gt; 容器停止运行之后，并不会消失，用下面的命令删除容器文件。 123456&gt; # 查出容器的 ID&gt; $ docker container ls --all&gt;&gt; # 删除指定的容器文件&gt; $ docker container rm [containerID]&gt; 也可以使用docker container run命令的--rm参数，在容器终止运行后自动删除容器文件。 12&gt; $ docker container run --rm -p 8000:3000 -it koa-demo /bin/bash&gt; 添加CMD命令上一节的例子里面，容器启动以后，需要手动输入命令node demos/01.js。我们可以把这个命令写在 Dockerfile 里面，这样容器启动以后，这个命令就已经执行了，不用再手动输入了。 1234567&gt; FROM node:8.4&gt; COPY . /app&gt; WORKDIR /app&gt; RUN npm install --registry=https://registry.npm.taobao.org&gt; EXPOSE 3000&gt; CMD node demos/01.js&gt; 上面的 Dockerfile 里面，多了最后一行CMD node demos/01.js，它表示容器启动后自动执行node demos/01.js。 你可能会问，RUN命令与CMD命令的区别在哪里？简单说，RUN命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；CMD命令则是在容器启动后执行。另外，一个 Dockerfile 可以包含多个RUN命令，但是只能有一个CMD命令。 注意，指定了CMD命令以后，docker container run命令就不能附加命令了（比如前面的/bin/bash），否则它会覆盖CMD命令。现在，启动容器可以使用下面的命令。 12&gt; $ docker container run --rm -p 8000:3000 -it koa-demo:0.0.1&gt; 发布image文件容器运行成功后，就确认了 image 文件的有效性。这时，我们就可以考虑把 image 文件分享到网上，让其他人使用。 首先，去 hub.docker.com 或 cloud.docker.com 注册一个账户。然后，用下面的命令登录。 12&gt; $ docker login&gt; 接着，为本地的 image 标注用户名和版本。 1234&gt; $ docker image tag [imageName] [username]/[repository]:[tag]&gt; # 实例&gt; $ docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1&gt; 也可以不标注用户名，重新构建一下 image 文件。 12&gt; $ docker image build -t [username]/[repository]:[tag] .&gt; 最后，发布 image 文件。 12&gt; $ docker image push [username]/[repository]:[tag]&gt; 发布成功以后，登录 hub.docker.com，就可以看到已经发布的 image 文件。 常用命令启动容器前面的docker container run命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用docker container start命令，它用来启动已经生成、已经停止运行的容器文件。 12&gt; $ docker container start [containerID]&gt; 停止容器前面的docker container kill命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而docker container stop命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。 12&gt; $ bash container stop [containerID]&gt; 这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。 查看容器日志docker container logs命令用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令查看输出。 12&gt; $ docker container logs [containerID]&gt; 执行shell命令docker container exec命令用于进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。 12&gt; $ docker container exec -it [containerID] /bin/bash&gt; 文件从容器cp到本机docker container cp命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。 12&gt; $ docker container cp [containID]:[/path/to/file] .&gt; 参考资料 Docker 入门教程 docker vs 虚拟机","categories":[{"name":"横看当前","slug":"横看当前","permalink":"http://www.less-is-more.top/categories/横看当前/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://www.less-is-more.top/tags/docker/"}]},{"title":"初始化进程","slug":"纵观古今/初始化进程","date":"2018-04-18T23:31:11.000Z","updated":"2018-04-26T03:07:41.758Z","comments":true,"path":"wiki/纵观古今/初始化进程/","link":"","permalink":"http://www.less-is-more.top/wiki/纵观古今/初始化进程/","excerpt":"sysvinit内核文件加载以后，开始运行第一个程序 /sbin/init，进程编号（pid）就是1。其他所有进程都从它衍生，都是它的子进程 初衷准备软件运行的环境，包括系统的主机名称、网络配置、语系处理、文件系统格式及其他服务的启动等","text":"sysvinit内核文件加载以后，开始运行第一个程序 /sbin/init，进程编号（pid）就是1。其他所有进程都从它衍生，都是它的子进程 初衷准备软件运行的环境，包括系统的主机名称、网络配置、语系处理、文件系统格式及其他服务的启动等 实现所有的init配置都在/etc/inittab文件当中 运行级别初衷操作系统启动时根据”运行级别”，确定要运行哪些程序及服务。依据有无网络与有无 X Window 而将 run level 分为 7 个等级 0 - halt (系统直接关机) 1 - single user mode (单人维护模式，用在系统出问题时的维护) 2 - Multi-user, without NFS (类似底下的 runlevel 3，但无 NFS 服务) 3 - Full multi-user mode (完整含有网络功能的纯文字模式) 4 - unused (系统保留功能) 5 - X11 (与 runlevel 3 类似，但加载使用 X Window) 6 - reboot (重新启动) 实现每个运行级别在/etc目录下面，都有一个对应的子目录，指定要加载的程序 /etc/rcS.d/ #开机后需要自动启动的一些基本服务/etc/rc0.d/ #运行模式0下需要启动的服务/etc/rc1.d/ #运行模式1下需要启动的服务/etc/rc2.d/ #运行模式2下需要启动的服务/etc/rc3.d/ #运行模式3下需要启动的服务/etc/rc4.d/ #运行模式4下需要启动的服务/etc/rc5.d/ #运行模式5下需要启动的服务/etc/rc6.d/ #运行模式6下需要启动的服务 S01console-setup.sh -&gt; ../init.d/console-setup.shS01cron -&gt; ../init.d/cronS01irqbalance -&gt; ../init.d/irqbalanceS01rsyslog -&gt; ../init.d/rsyslogS01ssh -&gt; ../init.d/ssh 文件名都是”字母S+两位数字+程序名”的形式,字母S表示Start,字母K表示Kill,后面的两位数字表示处理顺序,数字越小越早处理 /etc/init.d启动脚本都统一放在这个目录中,而rcN.d只是链接到该目录 systemd参见:Systemd (简体中文) 参考资料 鸟哥的linux私房菜 Systemd (简体中文) Linux 的启动流程 linux init.d 脚本的解释","categories":[{"name":"纵观古今","slug":"纵观古今","permalink":"http://www.less-is-more.top/categories/纵观古今/"}],"tags":[{"name":"sysvinit","slug":"sysvinit","permalink":"http://www.less-is-more.top/tags/sysvinit/"},{"name":"systemd","slug":"systemd","permalink":"http://www.less-is-more.top/tags/systemd/"}]},{"title":"boot(计算机)","slug":"纵观古今/boot-计算机","date":"2018-04-11T09:03:17.000Z","updated":"2018-04-26T03:07:53.476Z","comments":true,"path":"wiki/纵观古今/boot-计算机/","link":"","permalink":"http://www.less-is-more.top/wiki/纵观古今/boot-计算机/","excerpt":"boot起源先问一个问题，”启动”用英语怎么说？回答是boot。可是，boot原来的意思是靴子，”启动”与靴子有什么关系呢？ 原来，这里的boot是bootstrap（鞋带）的缩写，它来自一句谚语：1&quot;pull oneself up by one&apos;s bootstraps&quot;","text":"boot起源先问一个问题，”启动”用英语怎么说？回答是boot。可是，boot原来的意思是靴子，”启动”与靴子有什么关系呢？ 原来，这里的boot是bootstrap（鞋带）的缩写，它来自一句谚语：1&quot;pull oneself up by one&apos;s bootstraps&quot; 字面意思是”拽着鞋带把自己拉起来”，这当然是不可能的事情。最早的时候，工程师们用它来比喻，计算机启动是一个很矛盾的过程：必须先运行程序，然后计算机才能启动，但是计算机不启动就无法运行程序！早期真的是这样，必须想尽各种办法，把一小段程序装进内存，然后计算机才能正常运行。所以，工程师们把这个过程叫做”拉鞋带”，久而久之就简称为boot了。 参考资料 计算机是如何启动的","categories":[{"name":"纵观古今","slug":"纵观古今","permalink":"http://www.less-is-more.top/categories/纵观古今/"}],"tags":[{"name":"计算机","slug":"计算机","permalink":"http://www.less-is-more.top/tags/计算机/"}]},{"title":"启动流程","slug":"横看当前/linux/启动流程","date":"2018-04-11T02:39:09.000Z","updated":"2018-04-26T03:06:47.153Z","comments":true,"path":"wiki/横看当前/linux/启动流程/","link":"","permalink":"http://www.less-is-more.top/wiki/横看当前/linux/启动流程/","excerpt":"初衷为了了解从点击开机按钮到登陆页面，电脑内部都发生了什么，以便系统出问题时及时找到根源，纠正错误","text":"初衷为了了解从点击开机按钮到登陆页面，电脑内部都发生了什么，以便系统出问题时及时找到根源，纠正错误 BIOS基本输入输出系统(Basic Input/Output System) 初衷指定启动装置 功能 BIOS自我测试 侦测硬件并初始化 定义可启动装置的顺序 Boot Loader启动管理程序 初衷认识操作系统的文件格式并据以加载核心到主内存中去运行 功能 提供菜单：使用者可以选择不同的启动项目，这也是多重启动的重要功能 加载核心文件：直接指向可启动的程序区段来开始操作系统； 转交其他 loader：将启动管理功能转交给其他 loader 负责。 加载initrd到内存：加载虚拟文件系统 (Initial RAM Disk)到内存中，解压缩文件/boot/initrd并且在内存当中模拟成一个根目录，用于启动U盘, RAID, LVM, SCSI 等文件系统与磁碟介面的驱动程序等核心模块，IDE磁盘不需要initrd. 实现MBR装置的第一扇区MBR：主引导记录(Master boot record) 初衷告诉计算机到硬盘的哪一个位置去找操作系统 结构形式“主引导记录”只有512个字节，由三个部分组成 第1-446字节：调用操作系统的机器码 第447-510字节：分区表（Partition table） 第511-512字节：主引导记录签名（0x55和0xAA),表示这个设备可以启动，如果没有，控制权按照“启动顺序”交给下一个设备 分区表初衷硬盘可以分区，指定操作系统安装在哪个分区 结构形式分区表的长度只有64个字节，里面又分成四项，每项16个字节。所以，一个硬盘最多只能分四个一级分区，又叫做”主分区”。 每个主分区的16个字节，由6个部分组成： 第1个字节：如果为0x80，就表示该主分区是激活分区，控制权要转交给这个分区。四个主分区里面只能有一个是激活的。 第2-4个字节：主分区第一个扇区的物理位置（柱面、磁头、扇区号等等） 第5个字节：主分区类型 第6-8个字节：主分区最后一个扇区的物理位置。 第9-12字节：该主分区第一个扇区的逻辑地址 第13-16字节：主分区的扇区总数 注：最后的四个字节（”主分区的扇区总数”），决定了这个主分区的长度。也就是说，一个主分区的扇区总数最多不超过2的32次方。 如果每个扇区为512个字节，就意味着单个分区最大不超过2TB。再考虑到扇区的逻辑地址也是32位，所以单个硬盘可利用的空间最大也不超过2TB。如果想使用更大的硬盘，只有2个方法：一是提高每个扇区的字节数，二是增加扇区总数 硬盘启动控制权转交给硬盘的某个分区 卷引导记录(VBR),作用是告诉计算机，操作系统在这个分区里的位置，四个主分区里面，只有一个是激活的。计算机会读取激活分区的第一个扇区. 扩展分区和逻辑分区，随着硬盘越来越大，四个主分区已经不够了，需要更多的分区。但是，分区表只有四项，因此规定有且仅有一个区可以被定义成”扩展分区”（Extended partition）。 所谓”扩展分区”，就是指这个区里面又分成多个区。这种分区里面的分区，就叫做”逻辑分区”（logical partition）。计算机先读取扩展分区的第一个扇区，叫做”扩展引导记录”（Extended boot record，缩写为EBR）。它里面也包含一张64字节的分区表，但是最多只有两项（也就是两个逻辑分区）。 计算机接着读取第二个逻辑分区的第一个扇区，再从里面的分区表中找到第三个逻辑分区的位置，以此类推，直到某个逻辑分区的分区表只包含它自身为止（即只有一个分区项）。因此，扩展分区可以包含无数个逻辑分区。但是，似乎很少通过这种方式启动操作系统。如果操作系统确实安装在扩展分区，一般采用下一种方式启动。 启动管理器(boot loader),由用户选择启动哪一个操作系统,Linux环境中，目前最流行的启动管理器是Grub 注意事项1.先装windows再装linux 内核存放在/boot/vmlinuz 功能 内核被加载到内存当中，测试并驱动各个周边设备，包括储存装置、CPU、网络卡、声卡等等。 动态加载核心模块，通常这些模块是U盘, RAID, LVM, SCSI 等文件系统与磁碟介面的驱动程序等，放置在 /lib/modules/ 目录内 初始化进程参见：初始化进程 参考资料 鸟哥的linux私房菜 计算机是如何启动的 Linux 的启动流程","categories":[{"name":"横看当前","slug":"横看当前","permalink":"http://www.less-is-more.top/categories/横看当前/"},{"name":"linux","slug":"横看当前/linux","permalink":"http://www.less-is-more.top/categories/横看当前/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://www.less-is-more.top/tags/linux/"}]},{"title":"Hello World","slug":"为我所用/hello-world","date":"2018-04-11T02:12:09.736Z","updated":"2018-02-01T15:35:51.308Z","comments":true,"path":"wiki/为我所用/hello-world/","link":"","permalink":"http://www.less-is-more.top/wiki/为我所用/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. QuickCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 快速启动 菩提本无树，明镜亦非台 菩提本无树，明镜亦非台。 本来无一物，何处惹尘埃！","categories":[{"name":"为我所用","slug":"为我所用","permalink":"http://www.less-is-more.top/categories/为我所用/"}],"tags":[]},{"title":"windows-office激活","slug":"横看当前/windows-office激活","date":"2018-03-11T14:25:21.000Z","updated":"2018-03-13T13:57:58.649Z","comments":true,"path":"wiki/横看当前/windows-office激活/","link":"","permalink":"http://www.less-is-more.top/wiki/横看当前/windows-office激活/","excerpt":"","text":"简介：为了赚点零花钱，在淘宝上尝试卖windows系统和office办公软件的激活码和注册机，以下主要是激活原理： # 参考资料","categories":[{"name":"横看当前","slug":"横看当前","permalink":"http://www.less-is-more.top/categories/横看当前/"}],"tags":[]},{"title":"Git学习笔记","slug":"横看当前/Git学习笔记","date":"2018-03-04T09:55:55.000Z","updated":"2018-04-26T03:07:08.140Z","comments":true,"path":"wiki/横看当前/Git学习笔记/","link":"","permalink":"http://www.less-is-more.top/wiki/横看当前/Git学习笔记/","excerpt":"Git简介Git是分布式版本控制系统，简单来说就是能记录每次文件的改动，如下图 优点 分布式版本控制：每个人的电脑上都是一个完整的版本库，不用依赖于中央服务器仓库 分支管理：可以在脱机环境下多人同时协作开发","text":"Git简介Git是分布式版本控制系统，简单来说就是能记录每次文件的改动，如下图 优点 分布式版本控制：每个人的电脑上都是一个完整的版本库，不用依赖于中央服务器仓库 分支管理：可以在脱机环境下多人同时协作开发 版本控制 创建版本库 新建一个空目录 12mkdir learngitcd learngit 初始化 1git init 编辑版本库添加文件到版本库 文件添加到暂存区 1git add readme.txt 提交到当前分支 1git commit -m \"wrote a readme file\" 撤销修改 当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时 1git checkout -- file 当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改 12git reset HEAD file回到情况1 已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库 删除文件 从版本库中删除该文件 12git rm filegit commit -m \"remove file\" 如果工作区被删除，可从版本库恢复文件到最新版本，你会丢失最近一次提交后你修改的内容 1git checkout -- file ​ 查看版本库 查看工作区的状态 1git status 查看工作区与暂存区之间区别 1git diff readme.txt 查看工作区和版本库里面最新版本的区别 1git diff HEAD -- readme.txt 查看从最近到最远的提交日志，以便确定要回退到哪个版本 1git log 不同版本之间穿梭 1git reset --hard HEAD HEAD 当前版本 HEAD^ 上个版本 HEAD^^ 上上个版本 HEAD~100 上100个版本 版本号(只需输入前6位) 相应版本 查看命令历史，以便确定要回到未来的哪个版本 1git reflog Git原理Git跟踪并管理的是修改，而非文件 目录learngit = 工作区 + 版本库(.git目录) HEAD指向当前分支 新建了一个指针叫dev,HEAD指向当前分支在dev 远程仓库&lt;-&gt;本地仓库本地仓库-&gt;远程仓库 关联一个远程库 1git remote add origin git@github.com:用户名/repo-name.git 第一次推送master分支的所有内容 1git push -u origin master 推送最新修改 1git push origin master 本地仓库&lt;-远程仓库 1git clone 仓库地址 分支管理创建及编辑分支 查看分支 1git branch 创建分支 1git branch &lt;name&gt; 切换分支 1git checkout &lt;name&gt; 创建+切换分支 1git checkout -b &lt;name&gt; 合并某分支到当前分支 1git merge &lt;name&gt; 删除分支 1git branch -d &lt;name&gt; 解决分支冲突 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再git add和git commit，合并完成 查看分支的合并情况 1git log --graph --pretty=oneline --abbrev-commit 分支管理策略 默认模式(fast forward)合并dev分支 1git merge dev 普通模式合并 1git merge --no-ff -m \"merge with no-ff\" dev 注：合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward模式合并就看不出来曾经做过合并 bug分支:临时修复bug 储藏当前工作现场 1git stash bug修复完成后，查看储藏列表 1git stash list 恢复 1234恢复但不删除stash内容git stash apply恢复并且删除stash内容git stash pop 新功能分支 开发一个新feature，最好新建一个分支 丢弃一个没有合并过的分支 1git branch -D &lt;branchname&gt; 多人协作推送push 推送主分支 1git push origin master 推送其他分支 1git push origin dev 推送原则 master分支是主分支，因此要时刻与远程同步 dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步 bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发 拉取分支到本地 1git pull 在本地创建和远程分支对应的分支，本地和远程分支的名称最好一致 1git checkout -b dev origin/dev 建立本地分支和远程分支的关联(如果git pull提示“no tracking information”) 1git branch --set-upstream branch-name origin/branch-name 解决推送冲突 首先，可以尝试推送自己的修改 1git push origin branch-name 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并 如果合并有冲突，则解决冲突，并在本地提交 没有冲突或者解决掉冲突后再次推送 1git push origin branch-name 标签管理创建及查看标签tag就是一个让人容易记住的有意义的名字，它跟某个commit id绑在一起 新建一个标签 1git tag &lt;tagname&gt; 查看所有标签 1git tag v1.0 给历史提交的commit id（6224937）打标签 1git tag v0.9 6224937 查看标签信息 1git show v0.9 创建带有说明的标签 1git tag -a v0.1 -m &quot;version 0.1 released&quot; 3628164 用私钥签名一个标签 1git tag -s v0.2 -m &quot;signed version 0.2 released&quot; fec145a 修改标签 删除标签 1git tag -d v0.1 推送标签到远程 1git push origin &lt;tagname&gt; 一次性推送全部尚未推送到远程的本地标签 1git push origin --tags 删除远程标签 先删除本地标签 1git tag -d v0.9 删除远程标签 1git push origin :refs/tags/v0.9 ​ 参考资料 Git教程 Git笔记 常用 Git 命令清单 Git 工作流程 Git 使用规范流程 Git远程操作详解","categories":[{"name":"横看当前","slug":"横看当前","permalink":"http://www.less-is-more.top/categories/横看当前/"}],"tags":[{"name":"git","slug":"git","permalink":"http://www.less-is-more.top/tags/git/"}]},{"title":"shell","slug":"横看当前/linux/个性化配置/shell","date":"2018-02-07T18:03:11.000Z","updated":"2018-04-26T03:06:05.211Z","comments":true,"path":"wiki/横看当前/linux/个性化配置/shell/","link":"","permalink":"http://www.less-is-more.top/wiki/横看当前/linux/个性化配置/shell/","excerpt":"初衷：为了简单方便的使用shell,以及方便记住众多linux命令 组成：安装fish:Fish 是”the friendly interactive shell”的简称，最大特点就是方便易用。很多其他 Shell 需要配置才有的功能，Fish 默认提供，不需要任何配置。 1sudo apt-get install fish 启动：1fish","text":"初衷：为了简单方便的使用shell,以及方便记住众多linux命令 组成：安装fish:Fish 是”the friendly interactive shell”的简称，最大特点就是方便易用。很多其他 Shell 需要配置才有的功能，Fish 默认提供，不需要任何配置。 1sudo apt-get install fish 启动：1fish 功能：彩色显示：12345# 无效命令为红色$ mkd# 有效命令为蓝色$ mkdir 有效路径会有下划线1$ cat ~/somefi 自动建议：Fish 会自动在光标后面给出建议，表示可能的选项，颜色为灰色。 如果采纳建议，可以按下→或Control + F。如果只采纳一部分，可以按下Alt + → 自动补全:输入命令时，Fish 会自动显示匹配的上一条历史记录 如果没有匹配的历史记录，Fish 会猜测可能的结果，自动补全各种输入。比如，输入pyt再按下Tab，就会自动补全为python命令。如果有多个可能的结果，Fish 会把它们都列出，还带有简要介绍. 常用命令配置：1.在/root目录下创建一个文件，例如：sample 2.把所有常用的命令保存在sample中 3.打开/root/.bashrc，加入别名：alias sample=’(cd ~ &amp;&amp; cat sample |grep ‘ 4.当想查找某个命令时，直接输入：sample 命令名) 5.时常把自己常用命令扩充到sample中 参考资料 [Fish shell 入门教程 ](http://www.ruanyifeng.com/blog/2017/05/fish_shell.html) [50个最常用的Unix/Linux命令 ](https://gywbd.github.io/posts/2014/8/50-linux-commands.html#whereis)","categories":[{"name":"横看当前","slug":"横看当前","permalink":"http://www.less-is-more.top/categories/横看当前/"},{"name":"linux","slug":"横看当前/linux","permalink":"http://www.less-is-more.top/categories/横看当前/linux/"},{"name":"个性化配置","slug":"横看当前/linux/个性化配置","permalink":"http://www.less-is-more.top/categories/横看当前/linux/个性化配置/"}],"tags":[{"name":"fish","slug":"fish","permalink":"http://www.less-is-more.top/tags/fish/"}]},{"title":"根目录说明","slug":"横看当前/linux/FHS/根目录说明","date":"2018-02-06T07:29:11.000Z","updated":"2018-04-26T03:06:36.653Z","comments":true,"path":"wiki/横看当前/linux/FHS/根目录说明/","link":"","permalink":"http://www.less-is-more.top/wiki/横看当前/linux/FHS/根目录说明/","excerpt":"","text":"初衷：为了搞明白linux,实现自己的构想。 组成：linux操作系统：内核+系统调用内核：操作系统(Operating System, OS)其实也是一组程序，这组程序的重点在于管理计算机的所有活动以及驱动系统中的所有硬件 系统调用接口:提供一整组开发接口用于应用程序开发 根目录 /：用途：根文件系统的内容必须足以启动、还原、恢复和/或修复系统 要启动系统，根分区上必须存在足以挂载其他分区的内容。这包括工具、配置、引导装载程序信息和其他启动必需的数据。 /usr 、 /opt 和 /var 的设计使得它们可以位于其他的分区或文件系统 要能够恢复和/或修复系统，一位有经验的维护者诊断和重建损坏系统所需要的工具必须放置在根文件系统中 要还原系统，从系统备份(软盘、磁带等等)还原的工具必须放置在根文件系统中 要求：/ 文件夹下要求有如下文件夹或符号链接 文件夹 描述 bin 必需命令的二进制文件 boot 引导加载程序的静态文件 dev 设备文件 etc 主机特定的系统配置 lib 必需的共享库和内核模块 media 可移动媒质的挂载点 mnt 临时挂载一个文件系统用的挂载点 opt 外部应用程序软件包 sbin 必需的系统级二进制文件 srv 本系统所提供服务的数据文件 tmp 临时文件 usr 二级层次结构 var 变量数据 home 用户主文件夹（可选） root root用户的主文件夹(可选) 补充： 让根系统系统尽量小 应用程序任何时候都不能创建或要求在根文件夹下保存特殊文件或子文件夹 详细文档：文件系统层次结构中文翻译版参考资料 [文件系统层次结构标准 ](https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E6%A0%87%E5%87%86) [linux系统目录详解（全而易懂） ](http://blog.51cto.com/ctohf/907442) [Linux目录结构 ](http://linux-wiki.cn/wiki/zh-hans/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84) [Linux 下各个目录的作用及内容 ](https://cnbin.github.io/blog/2015/06/23/linux-xia-ge-ge-mu-lu-de-zuo-yong-ji-nei-rong/) [Linux文件系统中/bin、/sbin、/usr/bin、/usr/sbin、/usr/local/bin、/usr/local/sbin文件夹的区别是什么？ ](https://www.zhihu.com/question/21265424) [Unix目录结构的来历 ](http://www.ruanyifeng.com/blog/2012/02/a_history_of_unix_directory_structure.html) 鸟哥的linux私房菜","categories":[{"name":"横看当前","slug":"横看当前","permalink":"http://www.less-is-more.top/categories/横看当前/"},{"name":"linux","slug":"横看当前/linux","permalink":"http://www.less-is-more.top/categories/横看当前/linux/"},{"name":"FHS","slug":"横看当前/linux/FHS","permalink":"http://www.less-is-more.top/categories/横看当前/linux/FHS/"}],"tags":[{"name":"文件层次系统","slug":"文件层次系统","permalink":"http://www.less-is-more.top/tags/文件层次系统/"}]},{"title":"百度云满宽带下载","slug":"横看当前/电影下载/百度云满宽带下载","date":"2018-02-03T12:44:18.000Z","updated":"2018-03-13T16:30:41.075Z","comments":true,"path":"wiki/横看当前/电影下载/百度云满宽带下载/","link":"","permalink":"http://www.less-is-more.top/wiki/横看当前/电影下载/百度云满宽带下载/","excerpt":"初衷：为了看电影，需要保存在百度云盘并下载，但是在客户端下载如龟速。 组成：下载软件：IDM多线程下载软件，最大可支持32个，针对百度云下载效果很好。下载地址及破解 为了百度云盘直接地址：baidudl：打开百度网盘网页，可直接获取其最初地址。把它安装在chrome浏览器中","text":"初衷：为了看电影，需要保存在百度云盘并下载，但是在客户端下载如龟速。 组成：下载软件：IDM多线程下载软件，最大可支持32个，针对百度云下载效果很好。下载地址及破解 为了百度云盘直接地址：baidudl：打开百度网盘网页，可直接获取其最初地址。把它安装在chrome浏览器中 问题：资源下到一半或以后提示输入用户名 分析：这是百度的地址过期了，百度真实的下载链接是有效期限的，在属性里更新一下地址就可以了. 具体操作：打开IDM，右键下载的文件，刷新一下下载地址，会出现一个对话框，不用管它，再找到那个文件原始下载地址，点击下载，就可以继续下载了 tip: glink与hlink区别 百度云盘离线下载通过离线下载秒传到云盘，然后再利用IDM下载到本地。 支持BT种子支持磁力链接、http/https/ftp/电驴(ed2k)参考资料 IDM吧分享 为什么用idm下载百度网盘资源下到一半或以后提示输入用户名","categories":[{"name":"横看当前","slug":"横看当前","permalink":"http://www.less-is-more.top/categories/横看当前/"},{"name":"电影下载","slug":"横看当前/电影下载","permalink":"http://www.less-is-more.top/categories/横看当前/电影下载/"}],"tags":[{"name":"idm","slug":"idm","permalink":"http://www.less-is-more.top/tags/idm/"}]},{"title":"禁止博客复制及右键功能","slug":"横看当前/JS/禁止博客复制及右键功能","date":"2018-02-02T14:06:13.000Z","updated":"2018-03-11T14:28:08.687Z","comments":true,"path":"wiki/横看当前/JS/禁止博客复制及右键功能/","link":"","permalink":"http://www.less-is-more.top/wiki/横看当前/JS/禁止博客复制及右键功能/","excerpt":"初衷：保护自己的文章不被摘抄采集，略微防止技术小白/小牛 操作：方法1：在body中加入以下代码1234&lt;/head&gt;&lt;body oncontextmenu=&quot;return false&quot; onselectstart=&quot;return false&quot;&gt;&lt;/body&gt;&lt;/html&gt;","text":"初衷：保护自己的文章不被摘抄采集，略微防止技术小白/小牛 操作：方法1：在body中加入以下代码1234&lt;/head&gt;&lt;body oncontextmenu=&quot;return false&quot; onselectstart=&quot;return false&quot;&gt;&lt;/body&gt;&lt;/html&gt; 破解：在浏览器页面打开控制台（F12），console中输入：12document.body.oncontextmenu=&quot;return true&quot;;document.body.onselectstart=&quot;return true&quot;; 方法2：插入script脚本12&lt;!--禁止复制--&gt; &lt;script type=&quot;text/Javascript&quot;&gt; document.onselectstart=function(e)&#123;return false;&#125;; &lt;/script&gt;&lt;!--禁止复制--&gt; &lt;script type=&quot;text/Javascript&quot;&gt; document.onselectstart=function(e)&#123;return false;&#125;; &lt;/script&gt; 破解原理：进入控制台，打开网页的source,搜索oncontextmenu和onselectstart，把它从false变为true. 方法3：强力推荐安装chrome插件Enable Copy，让你欲罢不能。 参考资料 开发网站为“禁止复制”“禁用右键功能”(易被破解) document.body.oncontextmenu=”return true”;document.body.onselectstart=”return true”;","categories":[{"name":"横看当前","slug":"横看当前","permalink":"http://www.less-is-more.top/categories/横看当前/"},{"name":"JS","slug":"横看当前/JS","permalink":"http://www.less-is-more.top/categories/横看当前/JS/"}],"tags":[{"name":"js","slug":"js","permalink":"http://www.less-is-more.top/tags/js/"}]},{"title":"redmi 4A刷机","slug":"横看当前/刷机/redmi-4A刷刷机","date":"2018-02-02T04:37:27.000Z","updated":"2018-04-26T03:05:04.202Z","comments":true,"path":"wiki/横看当前/刷机/redmi-4A刷刷机/","link":"","permalink":"http://www.less-is-more.top/wiki/横看当前/刷机/redmi-4A刷刷机/","excerpt":"初衷：对自带系统不满，垃圾广告太多，许多系统自带应用不需要却无法删除,无法获得最高权限。刷机可以更好的使用Google","text":"初衷：对自带系统不满，垃圾广告太多，许多系统自带应用不需要却无法删除,无法获得最高权限。刷机可以更好的使用Google 刷机方式卡刷： 手动导入安装包 刷入twrp模式：adb recovery模式： 小米助手(只能刷官方rom) 线刷： fastboot模式： 小米助手 fastboot模式：MiPhone 卡刷包和线刷包的区别 线刷一般是手机生产厂商所采取的一种升级方式，针对智能手机系统问题或非硬件损坏的手机故障来刷写固件，替换和覆盖各个分区所有可能被修改或者损坏的文件，使手机功能恢复正常。通过数据线连接电脑来进行刷机，系统底包，一般是 tg 压缩文件，里面是一大堆 img 文件，某些底包里也有文件夹。线刷一般是指厂商官方所采取的刷机、升级方式，主要是用来刷官方固件。 卡刷就是用SD卡作为储存介质来存放ROM文件（手机操作系统文件），本质是对系统文件替换的过程，不会重新刷写整个分区，只是替换部分系统分区文件来实现对手机内软件版本升级或更换第三方操作系统。即rom 包，一般是一个 zip 压缩文件，里面有 system 文件夹和其他一两个文件夹。卡刷一般是在recovery里进行的，卡刷一般是把固件或者升级包拷贝到SD卡或手机中进行刷机、升级操作。 卡刷包肯定是.zip压缩格式。 打开卡刷包后里面一般都会有 system 和 META-INF 、boot.img(内核)等文件与文件夹。 详细操作：卡刷：安全(.zip文件)手动导入： 导入安装包(.zip文件)到手机中，依次点击：设置 -&gt;我的设备-&gt; MIUI版本 -&gt; 三个点(右上角) -&gt; 手动选择安装包 小米助手： 进入recovery模式(设置 -&gt;我的设备-&gt; MIUI版本 -&gt; 三个点(右上角) -&gt; 重启到恢复模式或开机的时候一直按住电源键+音量UP键) ADB+TWRP： 下载win版adb客户端，以及redmi 4A机型TWRP文件，abd是电脑与手机沟通的桥梁，twrp类似于修复window时的PE系统。通过使用adb,把twrp安装在手机上。最新版TWRP下载地址，注意：一定要下载你的设备对应的twrp版本. 线刷：彻底，可救砖(.tgz文件)小米助手：进入fastboot模式(开机的时候一直按住电源键+音量down键)，选择线刷。 MiPhone：下载线刷包(.tgz等压缩文件)，进入fastboot模式(按住电源键+音量DOWN键)，打开miphone.exe,连接手机，导入线刷包。 刷机过程：解锁手机 可能出于安全考虑，锁定手机，但是只能使用官方发布的国内稳定版及开发版，广告，绑定一大堆。 有root权限，可刷官方发布的国外稳定版、开发版及第三方安装包，好处是广告少，可删除一些不必要的组件及系统应用。 解锁流程：1.申请解锁2.小米手机解BL锁详细教程 安装twrp：1.打开手机usb调试（不断点击“MIUI版本”，开启“开发者选项”），通过usb线连接电脑. 2.解压adb文件，调用cmd到adb目录中， 3.输入adb reboot bootloader，手机进入fastboot模式，输入fastboot flash recovery twrp.img，导入twrp.img文件，输入fastboot reboot，重启手机。 电脑传文件到手机adb push 文件名 手机存放位置。例如：1adb push aaa/contacts_app.db /sdcard/ 手机传文件到电脑adb pull 手机上的文件名 当前目录。例如：1adb pull /sdcard/1222073679.png adb pull 手机上的文件夹 当前目录某个文件夹。例如：1adb pull sdcard/360/ 360/ 导入安装包： 国际版 线刷包 欧洲版 必备工具刷入谷歌框架：安装包：opengapps详细教程：opengapps+twrp 为了最高权限(supersu)root的原理： 把所有者为root的su文件放入系统文件/system/bin、/sbin等目录下，放入之后就拥有了root权限.安装包： 刷入supersu 参考资料： 安卓的卡刷包和线刷包有何区别？线刷包可以卡刷麽？ 好马配好鞍，安装谷歌服务框架的正确姿势","categories":[{"name":"横看当前","slug":"横看当前","permalink":"http://www.less-is-more.top/categories/横看当前/"},{"name":"刷机","slug":"横看当前/刷机","permalink":"http://www.less-is-more.top/categories/横看当前/刷机/"}],"tags":[{"name":"redmi4A","slug":"redmi4A","permalink":"http://www.less-is-more.top/tags/redmi4A/"}]},{"title":"MyWiki构建过程","slug":"横看当前/hexo/MyWiki构建过程","date":"2018-02-01T08:05:02.000Z","updated":"2018-04-12T02:03:21.313Z","comments":true,"path":"wiki/横看当前/hexo/MyWiki构建过程/","link":"","permalink":"http://www.less-is-more.top/wiki/横看当前/hexo/MyWiki构建过程/","excerpt":"初衷：知识积累：维基百科，google书签，印象笔记，知乎，简书，灵感等知识整理：建立个人wiki知识管理系统，分类和整理零碎知识个人见解：博客，表达自己的感悟及理解 Wiki安装：主题安装：wikitten","text":"初衷：知识积累：维基百科，google书签，印象笔记，知乎，简书，灵感等知识整理：建立个人wiki知识管理系统，分类和整理零碎知识个人见解：博客，表达自己的感悟及理解 Wiki安装：主题安装：wikitten 选择wiki知识管理系统wikitten优点： 双栏 界面简洁 有纵深，侧边可展开显条目标题 支持Markdown书写 全文搜素 可添加文章 安装hexo主题hexo-theme-Wikitten1.进入hexo站点文件夹，克隆主题到themes/路径下12cd your-hexo-directorygit clone https://github.com/zthxxx/hexo-theme-Wikitten.git themes/Wikitten 2.覆盖站点目录中一些默认页面模板12cp -rf themes/Wikitten/_source/* source/cp -rf themes/Wikitten/_scaffolds/* scaffolds/ 3.重命名主题中的 _config.yml.example 到 _config.yml，然后可以使用配置文件配置主题1cp -f themes/Wikitten/_config.yml.example themes/Wikitten/_config.yml 站点配置修改站点 _config.yml 文件中的 theme 选项为 Wikitten 插件安装：全文搜索(hexo-generator-json-content)安装：1npm install hexo-generator-json-content --save 配置：在站点配置文件_config.yml中添加1234567jsonContent: ignore: - path/to/a/page - url/to/one/post - an-entire-category - specific.file - .ext # a file extension 爬虫抓取(hexo-generator-sitemap)安装：1npm install hexo-generator-sitemap --save 配置：在站点配置文件_config.yml中添加12sitemap: path: sitemap.xml 显示层的文章统一放在wiki文件夹配置：在站点配置文件_config.yml中添加1permalink: wiki/:title/ 建立多层分类(根据文章目录)安装：1npm install --save hexo-directory-category 显示访客统计及页面访问量配置 安装脚本 1&lt;script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"&gt;&lt;/script&gt; 打开themes/Wikitten/layout/common/head.ejs，添加上述的脚本即可 安装标签 1234&lt;br&gt;&lt;span id=\"busuanzi_container_page_pv\"&gt;&lt;i class=\"fa fa-eye\"&gt;&lt;/i&gt; &lt;span id=\"busuanzi_value_page_pv\"&gt;&lt;/span&gt;&lt;/span&gt;&amp;nbsp;|&amp;nbsp;&lt;span id=\"busuanzi_container_site_uv\"&gt;&lt;i class=\"fa fa-user\"&gt;&lt;/i&gt; &lt;span id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt;&lt;/span&gt; 打开themes/Wikitten/layout/common/footer.ejs，添加上述的脚本即可 部署到Github建立自己的主页个人主页 每个GitHub帐号下只能有1个个人主页repo 命名必须是/.github.io的形式，例如我的个人主页davidsmartwei/davidsmartwei.github.io 项目主页 可以有不限数量的项目主页repo 项目主页的GitHub二级域名为.github.io/，命名没有限制，例如我的项目主页davidsmartwei/mywiki 为了绑定域名与Github page在阿里云里购买一个域名，域名解析如下图 为了Github绑定域名在自己网站项目repo的根目录添加CNAME1www.less-is-more.top tip: 如果是直接在GitHub网页上添加文件的话，会遇到一个问题就是在通过hexo g -d之后hexo会把根目录下的CNAME文件删除。所以要把CNAME文件添加到/source目录下，这样hexo g -d之后hexo会自动把CNAME复制到/puclic目录下然后将/public路径下的内容进行复制并push到远程master分支的根目录下 sublime text可视化编辑Sublime安装LiveReload插件1.打开Package Control官网2.复制代码到sublime中运行3.按住shift+ctrl+p -&gt; Package Control:Install Package -&gt; enter 配置：方法1：过用户自定义配置来开启Preferences &gt; Package Settings &gt; LiveReload &gt; Settings User1&#123;&quot;enabled_plugins&quot;: [&quot;SimpleReloadPlugin&quot;,&quot;SimpleRefresh&quot;]&#125; 方法2：通过控制台命令来开启123451. Ctrl+Shift+P2. LiveReload: Enable/disableplugins3. Enable - Simple Reload Chrome浏览器安装LiveReload插件tip: 接着右键单击选择管理扩展程序，把允许访问网址文件这一选项勾选上 基本操作：站内链接：12345678// /2015/01/16/hello-world/&#123;% post_path hello-world %&#125;// &lt;a href=&quot;/2015/01/16/hello-world/&quot;&gt;Hello World&lt;/a&gt;&#123;% post_link hello-world %&#125;// &lt;a href=&quot;/2015/01/16/hello-world/&quot;&gt;Custom Title&lt;/a&gt;&#123;% post_link hello-world Custom Title %&#125; eg: 为了页面内跳转(锚点)eg:top to 插件安装 hexo new跳转打开sublime在 Hexo 目录下的 scripts 目录（若没有，则新建一个）中创建一个 JavaScript 脚本opensubl.js，监听 hexo new 这个动作。并在检测到 hexo new 之后，执行编辑器打开的命令123456var exec = require(&apos;child_process&apos;).exec;// Hexo 3.xhexo.on(&apos;new&apos;, function(data)&#123; exec(&apos;start &quot;&quot; &quot;C:/Program Files/Sublime Text 3/sublime_text.exe&quot; &apos; + data.path);&#125;); 参考资料: 用 Hexo 做个人 Wiki 知识管理系统 一个仿 Wikitten 样式的 Hexo 个人 wiki 系统主题 Hexo博客常用插件及用法 单个GitHub帐号下添加多个GitHub Pages的相关问题 GitHub Pages绑定顶级域名的方法 Hexo框架下给博客插入本地图片 Sublime Text 3 配置Live​Reload实时刷新网页 hexo的站内链接问题 在 hexo new 之后立即打开新建的 Markdown 文稿 搞定你的网站计数","categories":[{"name":"横看当前","slug":"横看当前","permalink":"http://www.less-is-more.top/categories/横看当前/"},{"name":"hexo","slug":"横看当前/hexo","permalink":"http://www.less-is-more.top/categories/横看当前/hexo/"}],"tags":[{"name":"wikitten","slug":"wikitten","permalink":"http://www.less-is-more.top/tags/wikitten/"},{"name":"github","slug":"github","permalink":"http://www.less-is-more.top/tags/github/"}]},{"title":"Hexo安装及部署到github","slug":"横看当前/hexo/hexo安装","date":"2017-05-30T06:04:23.000Z","updated":"2018-02-05T15:39:33.543Z","comments":true,"path":"wiki/横看当前/hexo/hexo安装/","link":"","permalink":"http://www.less-is-more.top/wiki/横看当前/hexo/hexo安装/","excerpt":"架构图: 解读:github：它就是一个服务器，专门存放生成的静态文件","text":"架构图: 解读:github：它就是一个服务器，专门存放生成的静态文件 hexo：类似于wordpress,是博客内容的载体或叫平台，组成文件有以下 deploy：执行hexo deploy命令部署到GitHub上的内容目录 public：执行hexo generate命令，输出的静态网页内容目录 scaffolds：layout模板文件目录，其中的md文件可以添加编辑 scripts：扩展脚本目录，这里可以自定义一些javascript脚本 source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。 _drafts：草稿文章 _posts：发布文章 themes：主题文件目录 _config.yml：全局配置文件，大多数的设置都在这里 package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮 生成命令：把用户资源文件转化为静态HTML文件1hexo generate 部署命令：把静态HTML文件发送到GitHub服务器的仓库中（repository）1hexo deploy 外网如何访问GitHub中的静态HTML文件：github仓库命名规则: github账号名.github.io 例如我的仓库为davidsmartwei.github.io，为什么这么命名呢，因为你可以通过在浏览器里输入 https://davidsmartwei.github.io/ 找到存放在github服务器上的静态HTML文件，通过里面的文件进而生成博客界面。 hexo安装：(在window系统)准备环境：安装Git安装Node.js安装hexo：任意位置点击鼠标右键，选择Git bash,输入npm命令1npm install -g hexo 生成项目： 新建一个喜爱的文件夹（如D:\\hexo），在D:\\hexo内点击鼠标右键，选择Git bash（作用是切换git bash工作目录到D:\\hexo），输入以下命令自动在该文件夹建立网站所需要的所有文件 1hexo init 安装依赖包 1npm install 本地查看（通过搭建本地服务器server查看博客） 安装server 1npm install hexo -server -save 生成静态HMTL文件及发送到本地服务器 12hexo generatehexo server 在浏览器中输入localhost:4000即可预览到博客，但是目前外网是访问不了博客，因为该博客只存放在本地，要想通过外网访问，需要把静态HMTL文件发送到github服务器上，如上解读所示。 部署到Github:创建github并建立仓库仓库命名规则： 账号.github.io eg:davidsmartwei.github.io 生成SSH密匙本地与github建立数据传输联系需要ssh密匙1ssh-keygen -t rsa -C “你的邮箱地址”，按3个回车，密码为空 邮箱地址为你在注册github时绑定的邮箱 在GitHub上添加SSH密钥1.在本地找到有步骤5生成的两个文件id_rsa（私匙）和id_rsa.pub（公匙）2.打开id_rsa.pub并复制里面的全部内容到GitHub上。settings—&gt;SSH and GPG keys—&gt;New SSH key 重点配置_config.yml使得连接到GitHub打开_config.yml，翻到最下面，改成我这样子的，1234deploy:type: gitrepository: git@github.com:davidsmartwei/davidsmartwei.github.io.gitbranch: master 注意：” : “后面要有空格，其中把davidsmartwei改为你的GitHub账号名 安装deploy1npm install hexo-deployer-git -save 完整测试123hexo cleanhexo generatehexo deploy 如出现以下提示，则说明部署成功1[info] Deploy done: git 现在就可以通过外网在浏览器里输入 https://davidsmartwei.github.io 访问博客","categories":[{"name":"横看当前","slug":"横看当前","permalink":"http://www.less-is-more.top/categories/横看当前/"},{"name":"hexo","slug":"横看当前/hexo","permalink":"http://www.less-is-more.top/categories/横看当前/hexo/"}],"tags":[{"name":"hexo install","slug":"hexo-install","permalink":"http://www.less-is-more.top/tags/hexo-install/"}]}]}